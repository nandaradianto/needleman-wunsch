import numpy as np

class NeedlemanWunsch(object):
    def __init__(self, x, y):
        self.x = x
        self.y = y
        self.solution = []

    delta = lambda self, x, y, i, j: 1 if x[i] != y[j] else 0

    def find_solution(self, OPT, m, n):
        if m == 0 and n == 0:
            return

        insert = OPT[m][n - 1] + 1 if n != 0 else float("inf")
        align = (
            OPT[m - 1][n - 1] + self.delta(self.x, self.y, m - 1, n - 1)
            if m != 0 and n != 0
            else float("inf")
        )
        delete = OPT[m - 1][n] + 1 if m != 0 else float("inf")

        best_choice = min(insert, align, delete)

        if best_choice == insert:
            self.solution.append("insert_" + str(self.y[n - 1]))
            return self.find_solution(OPT, m, n - 1)

        elif best_choice == align:
            self.solution.append("align_" + str(self.y[n - 1]))
            return self.find_solution(OPT, m - 1, n - 1)

        elif best_choice == delete:
            self.solution.append("remove_" + str(self.x[m - 1]))
            return self.find_solution(OPT, m - 1, n)

    def alignment(self):
        n = len(self.y)
        m = len(self.x)
        OPT = [[0 for i in range(n + 1)] for j in range(m + 1)]

        for i in range(1, m + 1):
            OPT[i][0] = i

        for j in range(1, n + 1):
            OPT[0][j] = j

        for i in range(1, m + 1):
            for j in range(1, n + 1):
                OPT[i][j] = min(
                    OPT[i - 1][j - 1] + self.delta(self.x, self.y, i - 1, j - 1),
                    OPT[i - 1][j] + 1,
                    OPT[i][j - 1] + 1,)
                    

        self.find_solution(OPT, m, n)

        return (OPT[m][n], self.solution[::-1])

if __name__ == '__main__':
     x = 'MHHNALQRRTVWVNAY'
     y = 'MHHALQRRTVWVNAY'
     print('Align: ' + x + ' to ' + y)
     sqalign = SequenceAlignment(x, y)
     min_edit, steps = sqalign.alignment()
     print('Total Alignments: ' + str(min_edit))
     print('The steps: ' + str(steps))

main_matrix = np.zeros((len(x)+1,len(y)+1))
match_checker_matrix = np.zeros((len(x),len(y)))


match_reward = 1
mismatch_penalty = -1
gap_penalty = -2


for i in range(len(x)):
    for j in range(len(y)):
        if x[i] == y[j]:
            match_checker_matrix[i][j]= match_reward
        else:
            match_checker_matrix[i][j]= mismatch_penalty

for i in range(len(x)+1):
    main_matrix[i][0] = i*gap_penalty
for j in range(len(y)+1):
    main_matrix[0][j] = j * gap_penalty

for i in range(1,len(x)+1):
    for j in range(1,len(y)+1):
        main_matrix[i][j] = max(main_matrix[i-1][j-1]+match_checker_matrix[i-1][j-1],
                                main_matrix[i-1][j]+gap_penalty,
                                main_matrix[i][j-1]+ gap_penalty)

aligned_1 = ""
aligned_2 = ""

ti = len(x)
tj = len(y)

while(ti >0 and tj > 0):

    if (ti >0 and tj > 0 and main_matrix[ti][tj] == main_matrix[ti-1][tj-1]+ match_checker_matrix[ti-1][tj-1]):

        aligned_1 = x[ti-1] + aligned_1
        aligned_2 = y[tj-1] + aligned_2

        ti = ti - 1
        tj = tj - 1
    
    elif(ti > 0 and main_matrix[ti][tj] == main_matrix[ti-1][tj] + gap_penalty):
        aligned_1 = x[ti-1] + aligned_1
        aligned_2 = "-" + aligned_2

        ti = ti -1
    else:
        aligned_1 = "-" + aligned_1
        aligned_2 = y[tj-1] + aligned_2

        tj = tj - 1

print(aligned_1)
print(aligned_2)
